'what happen when the elevator request button is pressed'

sequence requestElevator using requestedFloor AND direction
    
    call findElevator using requestedFloor AND direction
    call elevatorRequest
endsequence

'what happen with the call elevator button when the call has been answered'

sequence callElevatorButtonOff using call_ elevator button
    if elevator request is answered then
        set call elevator button as not active
    endif
endsequence

'what the controller compute to find an elevator'

sequence findElevator using floor, direction
    init elevator1 to null
    init elevator2 to null

    for each elevator in elevatorList
        if direction is up AND elevator status is moving up AND elevator position < than position AND elevator floor goal is > position 
            set elevator1 to 4
            set elevator2 to 4
        else if direction is down AND elevator status is moving down AND elevator position is > than position AND elevator floor goal is < than current floor
            set elevator1 to 3
            set elevator2 to 3
        else  if elevator status = idle and elevator floor = floor then
            set elevator1 to 2
            set elevator2 to 2
        else if elevator status is idle then
            set elevator1 to 1
            set elevator2 to 1
        endif
    endfor
        
    if elevator1 = elevator2 then
        call findSmallestGap
    else 
        return elevator with greatest value
    endif
endsequence

'how the controller find the smallest gap in case the two elevators end up with the same value'

sequence findSmallestGap
    init elevator1 to null
    init elevator2 to null

    for each elevator in elevatorList
        if elevator1 position is > position
            compute elevator1 position - position and set to elevator1
        else if elevator1 position < position
            compute position - elevator 1 position and set to elevator1
        else if elevator2 position > position
            compute elevator2 position - position and set to elevator2
        else if elevator 2 position < position
            compute position - elevator2 position and set to elevator2
        endif

    if elevator1 = elevator2 then
        return elevator1
    else
        return elevator with smallest value
    endif
endsequence

'what the elevator do when it is called when the controller find one after findElevator '

sequence operateElevator using floor, direction
    call moveElevatorToFloor
    when elevator reach requested floor
        call  operateDoor
    call callElevatorButtonOff
endsequence

'what the controller compute to make the elevator reach the floor requested by the call elevator button'

sequence moveElevatorToFloor using position, elevatorPosition
    if position > elevatorPosition
        compute position - elevatorPosition to diff
            repeat
                add 1 to elevatorPosition
            until elevator Position = position + diff
                return floor
    else if floorRequest < position
        compute position - floorRequest to diff
            repeat
                add -1 to position
            until elevatorPosition = position - diff
                return floor
    endif
    call elevatorSpeed
endsequence

'what the elevator do when requested to open and close the door'

sequence operateDoor using door
    set door to open
        if no mouvement set timer to 6 sec then close door
        else if mouvement is detected set timer to 2 sec after no mouvement is detected then close
        endif
endsequence

'what happen when the floor request button is pressed (inside the elevator)'

sequence requestFloorButtonOn using request elevator button, 
    if request floor button is pressed then
        set button as active
    endif
    call isElevatorFull
    call moveElevatorToFloorRequest

'what the controller compute to make the elevator reach the floor requested by the floor request button '

sequence moveElevatorToFloorRequest using position, floorRequest
    if floorRequest > position
        compute floorRequest - position to diff
            repeat
                add 1 to posision
            until elevatorPosition = position + diff
                return floor
    else if floorRequest < position
        compute position - floorRequest to diff
            repeat
                add -1 to position
            until elevatorPosition = position - diff
                return floor
    endif
    call elevatorSpeed
    call requestfloorButtonOff
endsequence

'what happen with the floor request button when the call has been answered'

sequence requestfloorButtonOff using request elevator button
    if floor request is answered then
        set floor request button as not active
    endif
endsequence

'how to tell if an elevator is full'

sequence isElevatorFull using scale
    set maxWeight to 3500
    if scale detect weight in elevator > maxWeight
        keep door open AND set overweight light on
    else do nothing
endsequence

'how the elevator speed is managed'

sequence elevatorSpeed using elevator
    if elevator position = floorRequestPosition -1
        elevator speed = slow
    else if elevator position = floorRequestPosition +1
        elevator speed = slow
    else elevator speed = normal
    endif
endsequence

'how to tell the elevators where at what floor to stay while idle'

sequence elevatorSchedule using time, elevators
     while elevator status = idle
        if time > 6 AND time < 8
            set elevator1 in elevatorList to floor 3
            set elevator2 in elevatorList to floor 7
        else if time > 16 AND time < 18
            set elevator1 in elevatorList to floor 1
            set elevator2 in elevatorList to floor 1
        else stay at last requested floor
        endif
    endwhile
endsequence